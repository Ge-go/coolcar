package http

import (
	"context"
	rentalpb "coolcar/rental/api/gen/v1"
	"coolcar/shared/http/util"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type AutoGenerated struct {
	Status    int    `json:"status"`
	Message   string `json:"message"`
	RequestID string `json:"request_id"`
	Result    Result `json:"result"`
}

type Result struct {
	Location Location `json:"location"`
	Address  string   `json:"address"`
}

type Location struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

const (
	getLocalKey = "U3OBZ-5TDCK-XEKJZ-AOW3M-JIFU7-UHBB3"
	getLocalURL = "https://apis.map.qq.com/ws/geocoder/v1/?key=%v&location=%v"
)

func TransformationLocal(ctx context.Context, local *rentalpb.Location) (string, error) {
	localStr := util.FloatToStr(local)
	urlPoi := fmt.Sprintf(getLocalURL, getLocalKey, localStr)

	req, err := http.NewRequestWithContext(ctx, "GET", urlPoi, nil)
	req.Header.Set("Content-Type", "application/json; encoding=utf-8")

	client := http.Client{}
	rsp, err := client.Do(req)

	data, err := ioutil.ReadAll(rsp.Body)

	var poi AutoGenerated
	err = json.Unmarshal(data, &poi)
	if err != nil {
		return "", err
	}

	return poi.Result.Address, nil
}
