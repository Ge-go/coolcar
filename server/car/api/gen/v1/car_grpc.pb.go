// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: car.proto

package carpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*CarEntity, error)
	GetCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*Car, error)
	GetCars(ctx context.Context, in *GetCarsReq, opts ...grpc.CallOption) (*GetCarsRsp, error)
	LockCar(ctx context.Context, in *LockCarReq, opts ...grpc.CallOption) (*LockCarRsp, error)
	UnlockCar(ctx context.Context, in *UnlockCarReq, opts ...grpc.CallOption) (*UnlockCarRsp, error)
	UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*UpdateCarResponse, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*CarEntity, error) {
	out := new(CarEntity)
	err := c.cc.Invoke(ctx, "/car.v1.CarService/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/car.v1.CarService/GetCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCars(ctx context.Context, in *GetCarsReq, opts ...grpc.CallOption) (*GetCarsRsp, error) {
	out := new(GetCarsRsp)
	err := c.cc.Invoke(ctx, "/car.v1.CarService/GetCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) LockCar(ctx context.Context, in *LockCarReq, opts ...grpc.CallOption) (*LockCarRsp, error) {
	out := new(LockCarRsp)
	err := c.cc.Invoke(ctx, "/car.v1.CarService/LockCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) UnlockCar(ctx context.Context, in *UnlockCarReq, opts ...grpc.CallOption) (*UnlockCarRsp, error) {
	out := new(UnlockCarRsp)
	err := c.cc.Invoke(ctx, "/car.v1.CarService/UnlockCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*UpdateCarResponse, error) {
	out := new(UpdateCarResponse)
	err := c.cc.Invoke(ctx, "/car.v1.CarService/UpdateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	CreateCar(context.Context, *CreateCarReq) (*CarEntity, error)
	GetCar(context.Context, *GetCarReq) (*Car, error)
	GetCars(context.Context, *GetCarsReq) (*GetCarsRsp, error)
	LockCar(context.Context, *LockCarReq) (*LockCarRsp, error)
	UnlockCar(context.Context, *UnlockCarReq) (*UnlockCarRsp, error)
	UpdateCar(context.Context, *UpdateCarReq) (*UpdateCarResponse, error)
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) CreateCar(context.Context, *CreateCarReq) (*CarEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarServiceServer) GetCar(context.Context, *GetCarReq) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedCarServiceServer) GetCars(context.Context, *GetCarsReq) (*GetCarsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedCarServiceServer) LockCar(context.Context, *LockCarReq) (*LockCarRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockCar not implemented")
}
func (UnimplementedCarServiceServer) UnlockCar(context.Context, *UnlockCarReq) (*UnlockCarRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockCar not implemented")
}
func (UnimplementedCarServiceServer) UpdateCar(context.Context, *UpdateCarReq) (*UpdateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.v1.CarService/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).CreateCar(ctx, req.(*CreateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.v1.CarService/GetCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCar(ctx, req.(*GetCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.v1.CarService/GetCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCars(ctx, req.(*GetCarsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_LockCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).LockCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.v1.CarService/LockCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).LockCar(ctx, req.(*LockCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_UnlockCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).UnlockCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.v1.CarService/UnlockCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).UnlockCar(ctx, req.(*UnlockCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.v1.CarService/UpdateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).UpdateCar(ctx, req.(*UpdateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car.v1.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _CarService_CreateCar_Handler,
		},
		{
			MethodName: "GetCar",
			Handler:    _CarService_GetCar_Handler,
		},
		{
			MethodName: "GetCars",
			Handler:    _CarService_GetCars_Handler,
		},
		{
			MethodName: "LockCar",
			Handler:    _CarService_LockCar_Handler,
		},
		{
			MethodName: "UnlockCar",
			Handler:    _CarService_UnlockCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _CarService_UpdateCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "car.proto",
}
